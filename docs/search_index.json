[["working-with-data.html", "Chapter 4 Working with Data 4.1 Basic dataframes 4.2 Tibbles 4.3 Beyond Toy Data 4.4 Summarizing Data", " Chapter 4 Working with Data In this section, we learn how to work with data in a dataframe. A dataframe is a two-dimensional array consisting of rows and columns. You can simply think of it as a spreadsheet (e.g. MS Excel, Google Sheets, etc.). 4.1 Basic dataframes R has some prebuilt functions to build dataframes. Let us see a simple example. Consider the following three vectors. name &lt;- c(&quot;Sam&quot;, &quot;Paulina&quot;, &quot;Cenk&quot;) age &lt;- c(23, 34, 19) height &lt;- c(179, 167, 173) Let us turn the data stored in different vectors into a single dataframe so that we can visualize the data better. #Let us first create the dataframe and assign it to the variable my_df my_df &lt;- data.frame(name,age,height) #Let&#39;s print the dataframe now my_df ## name age height ## 1 Sam 23 179 ## 2 Paulina 34 167 ## 3 Cenk 19 173 We can select a particular row, column, or cell on a dataframe by using indices. For this we can use the slicing method my_dataframe[row,column]. #Let us select the entire first row my_df[1,] ## name age height ## 1 Sam 23 179 #Now, let us select the first column my_df[,1] ## [1] &quot;Sam&quot; &quot;Paulina&quot; &quot;Cenk&quot; #Now, let us find Paulina&#39;s height. For this, we need to get the 2nd row and 3rd column. my_df[2,3] ## [1] 167 #Now, let us find Paulina&#39;s age and height. For this, we need to get the 2nd row and 2nd and 3rd columns. my_df[2,2:3] ## age height ## 2 34 167 #Finally, let us get Sam and Paulina&#39;s ages. my_df[1:2,2] ## [1] 23 34 You can also use the column name to select an entire column. Just add the dollar sign $ after the df and then the column mane. my_df$age ## [1] 23 34 19 4.2 Tibbles The standard dataframes in R are good but not great. Often, we will deal with a lot of data we may not now which index to use to find the value we want. So, we need to be able to have some better ways to access data on our dataframes. We also want to be able to add new data or change some of the existing data easily. For this, we will use various packages in tidyverse for better dataframe management. Let us first load the tidyverse library, which will load the necessary packages for the functionality described in the following sections. library(tidyverse) Next, let us introduce tibbles. A tibble is a dataframe with some improved properties. We can turn a regular dataframe into a tibble by calling the as_tibble() function on our dataframe. #Let&#39;s turn my_df into a tibble my_tibble &lt;- as_tibble(my_df) #Let&#39;s print my_tibble my_tibble ## # A tibble: 3 × 3 ## name age height ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Sam 23 179 ## 2 Paulina 34 167 ## 3 Cenk 19 173 As you can see above, the console output tells you that this is a 3x3 tibble meaning that it has 3 rows and 3 columns. It also tells you the type of the data in each column. You can see the data types right under each column name. 4.3 Beyond Toy Data So far we have been working with toy data. In real life projects, you will have a lot more data. The data will usually be stored in some file from which you will have to read into a dataframe. Alternatively, it might be some dataset that from a corpus easily accessible to R. Let us see a few ways in which we can load some realistic datasets into a tibble. 4.3.1 Reading data from a csv file In this course, we will use some of the data sets from Bodo Winter’s book. Go to this website to download the materials folder. Once your data has been downloaded, navigate to the materials/data folder and locate the nettle_1999_climate.csv file. To read in data from a csv to a tibble, we will use the read_csv() function. All we need to do is to provide the path to the csv file we want to read in. If your csv file is in the same folder as your script, you can simply give its name. Otherwise, you need to provide the relevant directory information as well in your path. #Let&#39;s read in the data nettle &lt;- read_csv(&#39;/Users/umit/Desktop/materials/data/nettle_1999_climate.csv&#39;) ## Rows: 74 Columns: 5 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): Country ## dbl (4): Population, Area, MGS, Langs ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #Let&#39;s print the head of the data to see what it looks like nettle ## # A tibble: 74 × 5 ## Country Population Area MGS Langs ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Algeria 4.41 6.38 6.6 18 ## 2 Angola 4.01 6.1 6.22 42 ## 3 Australia 4.24 6.89 6 234 ## 4 Bangladesh 5.07 5.16 7.4 37 ## 5 Benin 3.69 5.05 7.14 52 ## 6 Bolivia 3.88 6.04 6.92 38 ## 7 Botswana 3.13 5.76 4.6 27 ## 8 Brazil 5.19 6.93 9.71 209 ## 9 Burkina Faso 3.97 5.44 5.17 75 ## 10 CAR 3.5 5.79 8.08 94 ## # … with 64 more rows If you want to see the last 5 items, use the tail() function. tail(nettle) ## # A tibble: 6 × 5 ## Country Population Area MGS Langs ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Venezuela 4.31 5.96 7.98 40 ## 2 Vietnam 4.83 5.52 8.8 88 ## 3 Yemen 4.09 5.72 0 6 ## 4 Zaire 4.56 6.37 9.44 219 ## 5 Zambia 3.94 5.88 5.43 38 ## 6 Zimbabwe 4 5.59 5.29 18 If you want to view the entire dataset, you can use View(nettle). This will open a new tab in RStudio and show your data as a table. 4.3.2 Reading data from R data packages R has various data packages you can install and use. Let us install the languageR which has some nice language datasets. Once you install the package and load the library, you can easily use the datasets as tibles. For all the details and available datasets in languageR, you can check the languageR documentation on CRAN. #Let&#39;s load the library library(languageR) #We&#39;ll use the dativeSimplified dataset, which is documented. Let&#39;s see the documentation ?dativeSimplified #let&#39;s use the dativeSimplified data from the languageR data &lt;- as_tibble(dativeSimplified) #Let&#39;s print the first few lines of the data data ## # A tibble: 903 × 5 ## RealizationOfRec Verb AnimacyOfRec AnimacyOfTheme LengthOfTheme ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 NP feed animate inanimate 2.64 ## 2 NP give animate inanimate 1.10 ## 3 NP give animate inanimate 2.56 ## 4 NP give animate inanimate 1.61 ## 5 NP offer animate inanimate 1.10 ## 6 NP give animate inanimate 1.39 ## 7 NP pay animate inanimate 1.39 ## 8 NP bring animate inanimate 0 ## 9 NP teach animate inanimate 2.40 ## 10 NP give animate inanimate 0.693 ## # … with 893 more rows Dative Alternation is the phenomenon in English where a recipient of a ditransitive verb can occur as an NP or a PP. Alex gave Sam a book. Alex gave a book to Sam. Both of these constructions are grammatical and they mean essentially the same thing. The question is what factors are involved in picking one of the forms over the other. Bresnan et al. (2007) used this data to determine the relevant factors. Let us randomly select 10 examples and see what they look like. For that, we can use the folloing code. # store all possible row indices in a vector indices_all &lt;- 1:nrow(data) # set the random seed to make the results reproducible set.seed(123) # choose 10 such numbers at random without replacement indices_random &lt;- sample(indices_all, size = 10) # use them to index the data frame to get the corresponding rows data[indices_random,] ## # A tibble: 10 × 5 ## RealizationOfRec Verb AnimacyOfRec AnimacyOfTheme LengthOfTheme ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 NP give inanimate inanimate 1.79 ## 2 NP grant animate inanimate 1.10 ## 3 NP grant animate inanimate 2.40 ## 4 NP give animate inanimate 2.56 ## 5 NP tell animate inanimate 3.26 ## 6 PP give animate inanimate 0 ## 7 NP pay animate inanimate 0.693 ## 8 NP hand animate inanimate 0.693 ## 9 NP give inanimate inanimate 1.61 ## 10 NP wish animate inanimate 1.10 4.4 Summarizing Data Looking at the summary statistics of your data is always a good first step. Let’s take a look at the percentage of NP realizations of the recipient by animacy of the theme. # First, let&#39;s take a look at the key dependet variable (NP or PP) unique(data$RealizationOfRec) ## [1] NP PP ## Levels: NP PP # now, let&#39;s compute the percentages (perc_NP) and the number of observations in each subset data%&gt;% group_by(AnimacyOfRec) %&gt;% summarize(perc_NP = mean(RealizationOfRec == &quot;NP&quot;), N = n() ) ## # A tibble: 2 × 3 ## AnimacyOfRec perc_NP N ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 animate 0.634 822 ## 2 inanimate 0.420 81 What do the results say? There are a total of 822 instances of animate recipients. 63% of the animate recipients are NPs. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
