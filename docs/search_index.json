[["linear-regression-with-many-predictors.html", "Chapter 8 Linear Regression with Many Predictors 8.1 Fitting two Linear Models", " Chapter 8 Linear Regression with Many Predictors In the previous section, we built linear models with one predictor. In other words, we had only one dependent variable and one independent variable. Model Dependent Variable Predictor Taxi Cost Travel Distance Processing Reaction Time Word Frequency In many real life scenarios, multiple factors will be involved in the outcome of a particular experiments. In other words, a particular dependent variable will be the outcome of more than one independent variable (predictors). Let us consider our taxi example again. While our taxi model is primarily based on the distance we travel, sometimes we need to cross bridges or toll roads. These factors will obviously increase the cost as they get added to our total cost. The following is a simple example. You can download the data from Moodle or by just clicking this data link. Let us see if there is any relationship between the number of bridges and the cost when we travel only 3 kilometers. It looks like there is a decent positive correlation between the fare and the number of bridges crossed. So, we need to find a way to incorporate this into our linear model. The nice thing about linear models is that they allow us to incorporate multiple predictors each with its own slope. \\[ \\underbrace{Y}_{\\text{dependent variable}} = \\overbrace{\\underbrace{a}_{\\text{intercept}}}^{\\text{additive term}} + \\overbrace{\\underbrace{b_1}_{\\text{slope}} * \\underbrace{X_{1}}_{\\text{predictor}}}^{\\text{additive term}} + \\overbrace{\\underbrace{b_2}_{\\text{slope}} * \\underbrace{X_{2} }_{\\text{predictor}}}^{\\text{additive term}} + \\ldots\\] In R, fitting a linear model with multiple predictors is quite simple. All we have to do is to add the predictors with a + in the lm() function as in lm(dependent variable ~ Predictor 1 + Predictor 2 + ...). taxi_model_two_preds &lt;- lm(cab_fares$taxi_fare ~ cab_fares$distance_km + cab_fares$n_bridges) taxi_model_two_preds ## ## Call: ## lm(formula = cab_fares$taxi_fare ~ cab_fares$distance_km + cab_fares$n_bridges) ## ## Coefficients: ## (Intercept) cab_fares$distance_km cab_fares$n_bridges ## 14.366 5.991 13.024 The model is doing pretty well. The data coefficients I used to generate the data are as follows: intercept = 7 distance slope = 6 bridge slope = 13 I also added some random noise with the mean=7.5, sd=4.5. Let us also glance at the R2 and the p.values using the summary function. Alternatively, we could use the glance() function from the broom package. Give it a shot to see if you obsrve any differences. summary(taxi_model_two_preds) ## ## Call: ## lm(formula = cab_fares$taxi_fare ~ cab_fares$distance_km + cab_fares$n_bridges) ## ## Residuals: ## Min 1Q Median 3Q Max ## -15.0456 -2.9538 0.0829 3.0946 15.9076 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 14.36644 0.42465 33.83 &lt;2e-16 *** ## cab_fares$distance_km 5.99074 0.02746 218.16 &lt;2e-16 *** ## cab_fares$n_bridges 13.02431 0.04447 292.89 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 4.515 on 997 degrees of freedom ## Multiple R-squared: 0.9923, Adjusted R-squared: 0.9923 ## F-statistic: 6.414e+04 on 2 and 997 DF, p-value: &lt; 2.2e-16 library(broom) tidy(taxi_model_two_preds) ## # A tibble: 3 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 14.4 0.425 33.8 1.04e-167 ## 2 cab_fares$distance_km 5.99 0.0275 218. 0 ## 3 cab_fares$n_bridges 13.0 0.0445 293. 0 8.1 Fitting two Linear Models In the previous section, we fir a linear model with two variables. The R2 we got was quite high. Let us run two models with one variable and see how the R2 values change. distance_model &lt;- lm(cab_fares$taxi_fare ~ cab_fares$distance_km) bridge_model &lt;- lm(cab_fares$taxi_fare ~ cab_fares$n_bridges) distance_model ## ## Call: ## lm(formula = cab_fares$taxi_fare ~ cab_fares$distance_km) ## ## Coefficients: ## (Intercept) cab_fares$distance_km ## 85.194 5.656 bridge_model ## ## Call: ## lm(formula = cab_fares$taxi_fare ~ cab_fares$n_bridges) ## ## Coefficients: ## (Intercept) cab_fares$n_bridges ## 85.99 12.62 It looks like the models are still doing pretty well in identifying the slopes. Let us now take a look at their R2 values. glance(distance_model)$r.squared ## [1] 0.328751 glance(bridge_model)$r.squared ## [1] 0.6241472 The results are very interesting. It looks like the number of bridges explains the cost more than the distance. Let us add the two R2 values to see if they add up to the same value as our multiple regression model did. glance(taxi_model_two_preds)$r.squared ## [1] 0.9922884 glance(distance_model)$r.squared +glance(bridge_model)$r.squared ## [1] 0.9528982 Very close. Not too bad. It looks like when both of the predictors are taken into account, we might be able to explain even more variance but the difference is not huge. What is kinda weird is that the bridge costs seem to be more important factor than the distance in this model. Consider the same kind of data except now the distances are longer and the number of bridges are still the same. It looks like the coefficients are still the same but the R2 values change. This is an important point to stop and think a bit about how your data impacts your results and what kind of conclusions you’ll draw from the data. It also shows the importance of the representativeness of your data. The key point is to get data that represents a typical taxi ride for a particular area (population)**. In most cases, we don’t cross that many paid bridges. Nor do we ride such long distances either. distance_model_2 &lt;- lm(cab_fares_2$taxi_fare_2 ~ cab_fares_2$distance_km) bridge_model_2 &lt;- lm(cab_fares_2$taxi_fare_2 ~ cab_fares_2$n_bridges) #Print coefficients distance_model_2 ## ## Call: ## lm(formula = cab_fares_2$taxi_fare_2 ~ cab_fares_2$distance_km) ## ## Coefficients: ## (Intercept) cab_fares_2$distance_km ## 85.369 5.862 bridge_model_2 ## ## Call: ## lm(formula = cab_fares_2$taxi_fare_2 ~ cab_fares_2$n_bridges) ## ## Coefficients: ## (Intercept) cab_fares_2$n_bridges ## 199.86 12.19 #Print R squared. glance(distance_model_2)$r.squared ## [1] 0.7322066 glance(bridge_model_2)$r.squared ## [1] 0.2322919 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
