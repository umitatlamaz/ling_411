[["basics.html", "Chapter 2 Basics 2.1 Basic Math Operations 2.2 Operators 2.3 Variables and Assignment 2.4 Data Types", " Chapter 2 Basics You can think of R as a fancy calculator. We could do almost all of the operations we do in R on a calculator. However, that would take a lot of time and effort when we are dealing with a large amount of data. That’s (partly) why we’re using R. I hope this helps those who might have a bit of anxiety about coding. You should also note that everything we do in R can also be done in other programming languages. However, R is used a lot by data analysts and statisticians. It is relatively easier to use for data analysis and there are lots of libraries (code someone else has written before that makes our life easier) that come quite handy. Without further ado, let’s dive in. 2.1 Basic Math Operations You can use R to make carry out basic mathematical operations. Addition 2+2 ## [1] 4 Subtraction 4-2 ## [1] 2 Multiplication 47*3 ## [1] 141 Division 9/4 ## [1] 2.25 Floor Division 9%/%4 ## [1] 2 Exponentiation 2^3 ## [1] 8 2.2 Operators You can use basic mathematical operators in R. Equals == is the equals operator. Notice that this is distinct from the = operator we are used to. The latter is used for variable assignment in R. We won’t use it. When you run 2==2, R will evaluate this statement and return TRUE of FALSE. 2 == 2 ## [1] TRUE 2 == 7 ## [1] FALSE Not Equal != is the not equal operator. 2!=2 ## [1] FALSE 2!=7 ## [1] TRUE Other logical operators &lt;,&gt;,&lt;=,&gt;= 2&lt;3 ## [1] TRUE 2&gt;5 ## [1] FALSE 2&lt;=5 ## [1] TRUE 2&gt;=5 ## [1] FALSE 2.3 Variables and Assignment In R (like in many programming languages), values can be assigned to a variable to be used later. For example, you might want to store someone’s age in a variable and then use it later for some purpose. In R, variables created via assignment &lt;-. The following code creates a variable called alex and assigns it the value 35. Let’s assume that this is Alex’s age. alex &lt;- 35 Next time you want to do anything with the age, you can simply call the variable alex and do whatever you want with it (e.g. print, multiply, reassign, etc.). For example, the following code simply prints the value of the alex variable. alex ## [1] 35 The following code multiples it by 2. alex * 2 ## [1] 70 Now assume that Alex’s friend Emma’s is 2 years younger than Alex. Let’s assign Emma’s age by subtracting 2 from Alex’ age. In the following code block, the first line creates the variable emma and assigns it the value alex - 2. The second line simply prints the value of the variable emma. emma &lt;- alex - 2 emma ## [1] 33 A variable can hold different types of data. In the previous examples, we assigned integers to variables. We can also assign characters, vectors, etc. character name &lt;- &quot;emma&quot; name ## [1] &quot;emma&quot; vector age_list &lt;- c(35, 27, 48, 10) age_list ## [1] 35 27 48 10 2.4 Data Types In R, values have types: Data Type Examples Integer (Numeric): …, -3, -2, -1, 0, +1, +2, +3, … Double (Numeric): most rational numbers; e.g., 1.0, 1.5, 20.0, pi Character: \"a\", \"b\", \"word\", \"hello dear friend, ...\" Logical: TRUE or FALSE (or: T or F ) Factor: Restricted, user-defined set of values, internally represented numerically (e.g., Gender {‘male’, ‘female’, ‘other’}) Ordered factor: Factor with an ordering (e.g., Starbucks coffee sizes {‘venti’ &gt; ‘grande’ &gt; ‘tall’}) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
