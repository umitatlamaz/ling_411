[["descriptive-statistics.html", "Chapter 6 Descriptive Statistics 6.1 Distributions 6.2 Measures of central tendency", " Chapter 6 Descriptive Statistics Anytime you have some data, one of the first tasks you need to do is to find ways to summarize your data neatly. Raw data by itself will not make much sense. So, you want to calculate some summary statistics that describes your data. This is descriptive statistics (as opposed to inferential statistics). Let us start with a simple dataset about the mammalian sleep hours. library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.10 ## ✔ tidyr 1.2.1 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(magrittr) ## ## Attaching package: &#39;magrittr&#39; ## ## The following object is masked from &#39;package:purrr&#39;: ## ## set_names ## ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract library(lsr) mammalian_sleep &lt;- read_csv(&quot;./data/msleep_ggplot2.csv&quot;) %&gt;% select(name, sleep_total, bodywt) %&gt;% rename(sleep_total_h = sleep_total, bodywt_kg = bodywt) %&gt;% mutate(sleep_total_h = round(sleep_total_h) ) ## Rows: 83 Columns: 11 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (5): name, genus, vore, order, conservation ## dbl (6): sleep_total, sleep_rem, sleep_cycle, awake, brainwt, bodywt ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(mammalian_sleep) ## # A tibble: 6 × 3 ## name sleep_total_h bodywt_kg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cheetah 12 50 ## 2 Owl monkey 17 0.48 ## 3 Mountain beaver 14 1.35 ## 4 Greater short-tailed shrew 15 0.019 ## 5 Cow 4 600 ## 6 Three-toed sloth 14 3.85 There are three variables here, name, sleep_total_h and bodywt_kg. For each animal named in name, the sleep_total_h variable contains the average number of hours animals of this kind sleep per day. The variable bodywt_kg contains the average weight of that animal in kg. Let’s have a look at the sleep_total_h variable: print(mammalian_sleep$sleep_total_h) ## [1] 12 17 14 15 4 14 9 7 10 3 5 9 10 12 10 8 9 17 5 18 4 20 3 3 10 ## [26] 11 15 12 10 2 3 6 6 8 10 3 19 10 14 14 13 12 20 15 11 8 14 8 4 10 ## [51] 16 10 14 9 10 11 12 14 4 6 11 18 5 13 9 10 8 11 11 17 14 16 13 9 9 ## [76] 16 4 16 9 5 6 12 10 This output doesn’t make it easy to get a sense of what the data are actually saying. Just “looking at the data” isn’t a terribly effective way of understanding data. In order to get some idea about what’s going on, we need to calculate some descriptive statistics and draw some nice pictures. ggplot(mammalian_sleep, aes(sleep_total_h)) + geom_histogram(binwidth=1, color = &#39;black&#39;, fill = &#39;lightblue&#39;) Figure 6.1: A histogram of the average amount of sleep by animal (the sleep_total_h variable). As you might expect, the larger the margin the less frequently you tend to see it. 6.1 Distributions Let us see a couple more data examples to get a sense of what data might look like in the wild. First, let us generate some random data with a uniform distribution using the runif() function. uniform &lt;- as_tibble(runif(120, min = 1, max = 6)) uniform ## # A tibble: 120 × 1 ## value ## &lt;dbl&gt; ## 1 5.54 ## 2 1.19 ## 3 4.04 ## 4 1.11 ## 5 3.99 ## 6 3.59 ## 7 4.96 ## 8 3.11 ## 9 5.85 ## 10 2.26 ## # … with 110 more rows Let us plot the uniform data using a histogram. ggplot(uniform, aes(value)) + geom_histogram(binwidth=0.5,boundary=0, color = &#39;black&#39;, fill = &#39;lightblue&#39;) Figure 6.2: Histogram of a uniform distribution. Now, let us generate some random data with a normal distribution using the rnorm()` function. normal &lt;- as_tibble(rnorm(160)) Let us plot the uniform data using a histogram. ggplot(normal, aes(value)) + geom_histogram(binwidth=0.2, color = &#39;black&#39;, fill = &#39;lightblue&#39;) Figure 6.3: Histogram of a normal distribution. Here’s another one where we provide the mean and standard deviation parameteres. normal2 &lt;- as_tibble(rnorm(160, mean = 8, sd= 0.5)) Let us plot the uniform data using a histogram. ggplot(normal2, aes(value)) + geom_histogram(binwidth=0.2, color = &#39;black&#39;, fill = &#39;steelblue&#39;) Figure 6.4: Histogram of a normal distribution. ggplot(normal, aes(value)) + geom_histogram(binwidth=0.2, color = &#39;black&#39;, fill = &#39;lightblue&#39;) + geom_histogram(data=normal2, binwidth=0.2,boundary=0, color = &#39;black&#39;, fill = &#39;steelblue&#39;) Figure 6.5: Histogram of two normal distributions side by side. 6.2 Measures of central tendency Drawing pictures of the data, as I did in Figure 6.1 is an excellent way to convey the “gist” of what the data is trying to tell you, it’s often extremely useful to try to condense the data into a few simple “summary” statistics. In most situations, the first thing that you’ll want to calculate is a measure of central tendency. That is, you’d like to know something about the “average” or “middle” of your data lies. The three most commonly used measures are the mean, median and mode; occasionally people will also report a trimmed mean. I’ll explain each of these in turn, and then discuss when each of them is useful. 6.2.1 The mean The mean of a set of observations is just a normal, old-fashioned average: add all of the values up, and then divide by the total number of values. The first five animals’ typical amount of sleep is 12 + 17 + 14 + 15 + 4, so the mean of these observations is just: \\[ \\frac{12 + 17 + 14 + 15 + 4}{5} = \\frac{62.4}{5} = 12.48 \\] Of course, this definition of the mean isn’t news to anyone: averages (i.e., means) are used so often in everyday life that this is pretty familiar stuff. However, since the concept of a mean is something that everyone already understands, I’ll use this as an excuse to start introducing some of the mathematical notation that statisticians use to describe this calculation, and talk about how the calculations would be done in R. The first piece of notation to introduce is \\(N\\), which we’ll use to refer to the number of observations that we’re averaging (in this case \\(N = 5\\)). Next, we need to attach a label to the observations themselves. It’s traditional to use \\(X\\) for this, and to use subscripts to indicate which observation we’re actually talking about. That is, we’ll use \\(X_1\\) to refer to the first observation, \\(X_2\\) to refer to the second observation, and so on, all the way up to \\(X_N\\) for the last one. Or, to say the same thing in a slightly more abstract way, we use \\(X_i\\) to refer to the \\(i\\)-th observation. Just to make sure we’re clear on the notation, the following table lists the 5 observations in the sleep_total_h variable, along with the mathematical symbol used to refer to it, and the actual value that the observation corresponds to: the observation its symbol the observed value Cheetah (animal 1) \\(X_1\\) 12 hours Owl monkey (animal 2) \\(X_2\\) 17 hours Mountain beaver (animal 3) \\(X_3\\) 14 hours Greater short-tailed shrew (animal 4) \\(X_4\\) 15 hours Cow (animal 5) \\(X_5\\) 4 hours Okay, now let’s try to write a formula for the mean. By tradition, we use \\(\\bar{X}\\) as the notation for the mean. So the calculation for the mean could be expressed using the following formula: \\[ \\bar{X} = \\frac{X_1 + X_2 + ... + X_{N-1} + X_N}{N} \\] This formula is entirely correct, but it’s terribly long, so we make use of the summation symbol \\(\\scriptstyle\\sum\\) to shorten it.1 If I want to add up the first five observations, I could write out the sum the long way, \\(X_1 + X_2 + X_3 + X_4 +X_5\\) or I could use the summation symbol to shorten it to this: \\[ \\sum_{i=1}^5 X_i \\] Taken literally, this could be read as “the sum, taken over all \\(i\\) values from 1 to 5, of the value \\(X_i\\)”. But basically, what it means is “add up the first five observations”. In any case, we can use this notation to write out the formula for the mean, which looks like this: \\[ \\bar{X} = \\frac{1}{N} \\sum_{i=1}^N X_i \\] In all honesty, I can’t imagine that all this mathematical notation helps clarify the concept of the mean at all. In fact, it’s really just a fancy way of writing out the same thing I said in words: add all the values up, and then divide by the total number of items. However, that’s not really the reason I went into all that detail. My goal was to try to make sure that everyone reading this book is clear on the notation that we’ll be using throughout the book: \\(\\bar{X}\\) for the mean, \\(\\scriptstyle\\sum\\) for the idea of summation, \\(X_i\\) for the \\(i\\)th observation, and \\(N\\) for the total number of observations. We’re going to be re-using these symbols a fair bit, so it’s important that you understand them well enough to be able to “read” the equations, and to be able to see that it’s just saying “add up lots of things and then divide by another thing”. 6.2.2 Calculating the mean in R Okay that’s the maths, how do we get the magic computing box to do the work for us? If you really wanted to, you could do this calculation directly in R. For the first numbers, do this just by typing it in as if R were a calculator… (12 + 17 + 14 + 15 + 4) / 5 ## [1] 12.4 … in which case R outputs the answer 12.4, just as if it were a calculator. However, we learned quicker ways of doing that sum( mammalian_sleep$sleep_total_h[1:5] )/ 5 ## [1] 12.4 # or: mean( mammalian_sleep$sleep_total_h[1:5] ) ## [1] 12.4 6.2.3 The median The second measure of central tendency that people use a lot is the median, and it’s even easier to describe than the mean. The median of a set of observations is just the middle value. As before let’s imagine we were interested only in the first 5 animals: They sleep 12, 17, 14, 15, and 4 hours respectively. To figure out the median, we sort these numbers into ascending order: \\[ 4, 12, \\color{red}{14}, 15, 17 \\] From inspection, it’s obvious that the median value of these 5 observations is 32, since that’s the middle one in the sorted list (I’ve put it in red to make it even more obvious). Easy stuff. But what should we do if we were interested in the first 6 animals rather than the first 5? Since the sixth animal sleeps for 14 hours, our sorted list is now: \\[ 4, 12, \\color{red}{14}, \\color{red}{14}, 15, 17 \\] That’s also easy. It’s still 14. But what we do if we were interested in the first 8 animals? Here is our new sorted list. \\[ 4, 7, 9, \\color{red}{12}, \\color{red}{14}, 14, 15, 17 \\] There are now two middle numbers, 12 and 14. The median is defined as the average of those two numbers, which is of course 13. To understand why, think of the median as the value that divides the sorted list of numbers into two halves – those on its left, and those on its right. As before, it’s very tedious to do this by hand when you’ve got lots of numbers. To illustrate this, here’s what happens when you use R to sort all the sleep durations. First, I’ll use the sort() function to display the 83 numbers in increasing numerical order: sort( mammalian_sleep$sleep_total_h ) ## [1] 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 6 6 6 6 7 8 8 8 8 8 ## [26] 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 ## [51] 11 12 12 12 12 12 12 13 13 13 14 14 14 14 14 14 14 14 15 15 15 16 16 16 16 ## [76] 17 17 17 18 18 19 20 20 Because the vector is 83 elements long, the middle value is at position 42. This means that the median of this vector is 10. In real life, of course, no-one actually calculates the median by sorting the data and then looking for the middle value. In real life, we use the median command: median( mammalian_sleep$sleep_total_h ) ## [1] 10 which outputs the median value of 10. 6.2.4 Mean or median? What’s the difference? Figure 6.6: An illustration of the difference between how the mean and the median should be interpreted. The mean is basically the “centre of gravity” of the data set: if you imagine that the histogram of the data is a solid object, then the point on which you could balance it (as if on a see-saw) is the mean. In contrast, the median is the middle observation. Half of the observations are smaller, and half of the observations are larger. Knowing how to calculate means and medians is only a part of the story. You also need to understand what each one is saying about the data, and what that implies for when you should use each one. This is illustrated in Figure 6.6 the mean is kind of like the “centre of gravity” of the data set, whereas the median is the “middle value” in the data. What this implies, as far as which one you should use, depends a little on what type of data you’ve got and what you’re trying to achieve. As a rough guide: One consequence is that there’s systematic differences between the mean and the median when the histogram is asymmetric (skewed; see Section ??). This is illustrated in Figure 6.6 notice that the median (right hand side) is located closer to the “body” of the histogram, whereas the mean (left hand side) gets dragged towards the “tail” (where the extreme values are). To give a concrete example, suppose Bob (income $50,000), Kate (income $60,000) and Jane (income $65,000) are sitting at a table: the average income at the table is $58,333 and the median income is $60,000. Then Bill sits down with them (income $100,000,000). The average income has now jumped to $25,043,750 but the median rises only to $62,500. If you’re interested in looking at the overall income at the table, the mean might be the right answer; but if you’re interested in what counts as a typical income at the table, the median would be a better choice here. 6.2.5 Trimmed mean One of the fundamental rules of applied statistics is that the data are messy. Real life is never simple, and so the data sets that you obtain are never as straightforward as the statistical theory says.2 This can have awkward consequences. To illustrate, consider this rather strange looking data set (nevermind what it represents): \\[ -100,2,3,4,5,6,7,8,9,10 \\] If you were to observe this in a real life data set, you’d probably suspect that something funny was going on with the \\(-100\\) value. It’s probably an outlier, a value that doesn’t really belong with the others. You might consider removing it from the data set entirely, and in this particular case I’d probably agree with that course of action. In real life, however, you don’t always get such cut-and-dried examples. For instance, you might get this instead: \\[ -15,2,3,4,5,6,7,8,9,12 \\] The \\(-15\\) looks a bit suspicious, but not anywhere near as much as that \\(-100\\) did. In this case, it’s a little trickier. It might be a legitimate observation, it might not. When faced with a situation where some of the most extreme-valued observations might not be quite trustworthy, the mean is not necessarily a good measure of central tendency. It is highly sensitive to one or two extreme values, and is thus not considered to be a robust measure. One remedy that we’ve seen is to use the median. A more general solution is to use a “trimmed mean”. To calculate a trimmed mean, what you do is “discard” the most extreme examples on both ends (i.e., the largest and the smallest), and then take the mean of everything else. The goal is to preserve the best characteristics of the mean and the median: just like a median, you aren’t highly influenced by extreme outliers, but … like the mean, you “use” more than one of the observations. Generally, we describe a trimmed mean in terms of the percentage of observation on either side that are discarded. So, for instance, a 10% trimmed mean discards the largest 10% of the observations and the smallest 10% of the observations, and then takes the mean of the remaining 80% of the observations. Not surprisingly, the 0% trimmed mean is just the regular mean, and the 50% trimmed mean is the median. In that sense, trimmed means provide a whole family of central tendency measures that span the range from the mean to the median. For our toy example above, we have 10 observations, and so a 10% trimmed mean is calculated by ignoring the largest value (i.e., 12) and the smallest value (i.e., -15) and taking the mean of the remaining values. First, let’s enter the data dataset &lt;- c( -15,2,3,4,5,6,7,8,9,12 ) Next, let’s calculate means and medians: mean( dataset ) ## [1] 4.1 median( dataset ) ## [1] 5.5 That’s a fairly substantial difference, but I’m tempted to think that the mean is being influenced a bit too much by the extreme values at either end of the data set, especially the \\(-15\\) one. So let’s just try trimming the mean a bit. If I take a 10% trimmed mean, we’ll drop the extreme values on either side, and take the mean of the rest: mean( dataset, trim = .1) ## [1] 5.5 In this case it gives exactly the same answer as the median. Note that, to get a 10% trimmed mean you write trim = .1, not trim = 10. 6.2.6 Mode The mode is the last measure of central tendency we’ll look at. It is very simple: it is the value that occurs most frequently. Let’s look at the some soccer data: specifically, the European Cup and Champions League results in the time from 1955-2016. Lets find out which team has won the most matches. The command below tells R we just want the first 25 rows of the data.frame. library(engsoccerdata) table(champs$tiewinner) %&gt;% sort(decreasing=T) %&gt;% .[1:25] ## ## Real Madrid Bayern Munich SL Benfica AC Milan ## 183 134 110 103 ## Barcelona Liverpool Juventus Dinamo Kiev ## 101 97 87 82 ## Celtic Manchester United RSC Anderlecht AFC Ajax ## 81 81 75 71 ## Internazionale Steaua Bucuresti Crvena Zvezda Rangers ## 66 63 61 58 ## Partizan Belgrade PSV Eindhoven Dinamo Zagreb FC Porto ## 52 49 48 46 ## Atletico Madrid Panathinaikos BATE Borisov CSKA Sofia ## 45 44 40 40 ## Galatasaray ## 40 It appears that the mode of the winning team is ‘Real Madrid’. That doesn’t come as a surprise even to me. Of course, the mode is the right (and only) summary for nominal variables. But we can compute a mode for all types of variables. For example, let’s take a look at the mean, median, and mode of the total number of goals per game. champs %&lt;&gt;% mutate(total_goals = hgoal + vgoal) # total goals is home team goals + visitor goals mean(champs$total_goals) ## [1] 2.81642 median(champs$total_goals) ## [1] 3 modeOf(champs$total_goals) ## [1] 2 mean_goals &lt;- mean(champs$total_goals) median_goals &lt;- median(champs$total_goals) mode_goals &lt;- modeOf(champs$total_goals) ggplot(champs, aes(total_goals)) + geom_histogram() + geom_vline(xintercept = mean_goals, color = &quot;red&quot;) + geom_vline(xintercept = median_goals, color = &quot;blue&quot;) + geom_vline(xintercept = mode_goals, color = &quot;green&quot;) + geom_text(data=NULL, x = mean_goals-.6, y=1470, label = &quot;mean&quot;, color = &quot;red&quot;) + geom_text(data=NULL, x = median_goals+.75, y=1500, label = &quot;median&quot;, color = &quot;blue&quot;) + geom_text(data=NULL, x = mode_goals-.6, y=1530, label = &quot;mode&quot;, color = &quot;green&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 6.2.7 Summary There are multiple measures of central tendency that can be used to summarize an aspect of a distribution: _ (arithmetic) mean, median, and mode_. They answer different questions about distribution. For example, in the distribution of number of goals per game in the previous section mean: “If the same number of goals were scored in each game, how many goals would be scored?” median: “What is a ‘mediocre’ game like?” mode: “What is the most typical game like?” The choice to use \\(\\Sigma\\) to denote summation isn’t arbitrary: it’s the Greek upper case letter sigma, which is the analogue of the letter S in that alphabet. Similarly, there’s an equivalent symbol used to denote the multiplication of lots of numbers: because multiplications are also called “products”, we use the \\(\\Pi\\) symbol for this; the Greek upper case pi, which is the analogue of the letter P.↩︎ Or at least, the basic statistical theory – these days there is a whole subfield of statistics called robust statistics that tries to grapple with the messiness of real data and develop theory that can cope with it.↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
